<div class="tutorial">
<div class="funky-text">
  <h1><%= funky_text("How To Play") %></h1>
</div>

<!-- <p>First of all connect to the <strong>BeamChallenge</strong> WiFi network (password <strong>ilovebeam</strong>).</p> -->

<p><b>To start playing, connect to the server node <strong><%= @server %></strong>
from an IEx/erl session using the <strong>beam</strong> cookie. When starting the
shell remember to provide a full name which includes your IP address.</b></p>

<pre>$ iex --name joe@192.168.0.10 --cookie beam
iex> Node.connect :"<%= @server %>"
true</pre>
or
<pre>$ erl -setcookie beam -name joe@192.168.0.10
erl> net_adm:ping('<%= @server %>').
pong</pre>

<p><b>Now you can signup a new user by running</b></p>

<pre>iex> GenServer.call({:bo_server, :"<%= @server %>"}, {:signup, "joe"}) </pre>
or
<pre>erl> gen_server:call({bo_server, '<%= @server %>'}, {signup, <<"joe">>}). </pre>

<p><b>You can fetch the current task with</b></p>

<pre>iex> GenServer.call({:bo_server, :"<%= @server %>"}, {:task, "joe"}) </pre>
or
<pre>erl> gen_server:call({bo_server, '<%= @server %>'}, {task, <<"joe">>}). </pre>

<p><b>When you're done, you can submit your solution</b></p>

<pre>iex> GenServer.call({:bo_server, :"<%= @server %>"}, {:submit, "joe", fn() -> :k end})</pre>
or
<pre>erl> gen_server:call({bo_server, '<%= @server %>'}, {submit, <<"joe">>, fun() -> k end}).</pre>

<p><b>If you get stuck and want to skip the current task</b></p>

<pre>iex> GenServer.call({:bo_server, :"<%= @server %>"}, {:skip, "joe"}) </pre>
or
<pre>erl> gen_server:call({bo_server, '<%= @server %>'}, {skip, <<"joe">>}). </pre>

<p><b>And if you want to check your current score</b></p>

<pre>iex> GenServer.call({:bo_server, :"<%= @server %>"}, {:score, "joe"}) </pre>
or
<pre>erl> gen_server:call({bo_server, '<%= @server %>'}, {score, <<"joe">>}). </pre>

<div class="funky-text">
  <h1><%= funky_text("The Game") %></h1>
</div>

<p>You will be able to play at any time during the two days of the conference.
The challenges are aimed at beginner to intermediate level developers, and each
one takes only a few minutes to solve.</p>

<p>You can check the leaderboard and scores at the Erlang Solutions table at
any time. At the end of the conference, the player with the highest score will
win the Amazon Echo. In case a tie should occur, a draw will be conducted to
select the prize winner.</p>

<p>May the best Alchemist win!</p>

<div class="funky-text">
  <h1><%= funky_text("Rules") %></h1>
</div>

<ul>
  <li>To prevent fraud, you must always post solutions from the node where you signed up.</li>
  <li>There is no undo, so if you skipped a task you can't choose to submit a solution for it later.</li>
  <li>Each task has its own score. If you solve a task correctly, you get full points. If you skip a task, you lose half of that task points.</li>
</div>
